#! /usr/bin/env python
# encoding: utf-8

import os
from waflib.Errors import WafError

def build(ctx):
    ctx.env.RPATH_zcm = [ctx.path.get_bld().abspath()]
    ctx.shlib(target = 'zcm',
              # Note: Had to make the include path one level up so that includes
              #       within this directory structure would match the structure
              #       of the installed files. Includes should be written as:
              #       #include "zcm/file.h".
              includes = '..',
              export_includes = '..',
              use = ['default', 'zmq'],
              source = ctx.path.ant_glob(['*.cpp', '*.c',
                                          'util/*.c', 'util/*.cpp',
                                          'transport/**/*.c', 'transport/**/*.cpp']))

    ## Collect files for Embedded
    ctx(rule = 'tar cfz ${TGT} ${SRC}',
        name = 'embed-tar',
        source = ['zcm.h', 'zcm_private.h', 'zcm.c', 'zcm_coretypes.h', 'transport.h',
                  'nonblocking.h', 'nonblocking.c', 'transport/generic_serial_transport.h',
                  'transport/generic_serial_transport.c'],
        target = 'zcm-embed.tar.gz')

    ## Test the embedded export
    ctx(rule = exec_test_embedded,
        source = 'zcm-embed.tar.gz',
        target = 'zcm-embed.id',
        after = 'embed-tar')

    ctx.install_files('${PREFIX}/include/zcm',
                      ['zcm.h', 'server.h', 'zcm_coretypes.h', 'transport.h', 'transport_registrar.h',
                       'url.h', 'eventlog.h', 'zcm-cpp.hpp', 'zcm-cpp-impl.hpp',
                       'transport_register.hpp', 'message_tracker.hpp'])

    ctx.install_files('${PREFIX}/include/zcm/transport',
                      ['transport/generic_serial_transport.h'])

    ctx.recurse('util')

    if ctx.env.USING_JAVA:
        ctx.recurse('java');

    if ctx.env.USING_NODEJS:
        ctx.recurse('js');

    if ctx.env.USING_CXXTEST:
        ctx.cxxtest(use = ['zcm', 'testzcmtypes'])

def exec_test_embedded(tsk):
    src = tsk.inputs[0].abspath()
    blddir =  os.path.dirname(src)
    testdir = blddir+'/test-embed'
    ret =  tsk.exec_command('rm -rf {0} && mkdir {0} && cd {0} && tar xf {1} && ' \
                            'cc -std=c89 -I. -DZCM_EMBEDDED -c zcm/*.c && ' \
                            'echo "embed passed" > {2}' \
                            .format(testdir, src, tsk.outputs[0].abspath()))

    if ret is not 0:
        raise WafError('Embedded build failed, check embedded core files for C89 compliance')

    return ret
